using UnityEngine;
using System.Collections;

public class ItemController : MonoBehaviour {

	#region Public Variables
	public enum SpawnState{SPAWNING, WAITING, COUNTING};
	[System.Serializable]
	public class Wave{
		public string name; //nome da Wave (para Items)
		public Transform item; // Referencia para instanciar o objeto (Enemies, player, item)
		//public Transform touchColorItem; //referencia para cor do touch 
		public int count; //armazena a quantidade do contador
		public float rate; 
	}
	[SerializeField] private string spawnSound;
	public Wave[] waves;
	public float timeBetweenWaves = 2.5f;
	public float waveCountdown;
	public Transform[] itemSpawnPoint;
	public float lifetime;
	public float timeToDestroy; 
	public float minTime = 7f;
	public float maxTime = 90f;
	#endregion

	#region Private Variables
	private float searchCountdown = 2f; //Time between search is in seconds 
	private int nextWave = 0;
	private bool isFirstWave; 
	private SpawnState state = SpawnState.COUNTING;
	private SpriteRenderer touchColor;
	#endregion


	void Start(){
		if(waves.Length == 0){
			Debug.LogError("No WAVES HAS BEEN FOUND. ");
		}

		if(itemSpawnPoint.Length == 0){
			Debug.LogError("No item Spawn referenced");
		}
		waveCountdown = timeBetweenWaves;

		StartCoroutine(ItemHasEnergy());

	}

	void Update(){
		waveCountdown -= Time.deltaTime;
	}
//
//	void isTimeToSpawn(){
//		//touchColor.color = Color.red;
//		if(state == SpawnState.WAITING){
//			//Criar condicao para que seja spawnado mesmo que esteja contando 
//			if(!ItemHasEnergy()){
//				WaveCompleted();
//				//Update Points on Game Manager
//			}else{
//				return;
//			}
//		}
//
//		else
//		{
//			waveCountdown -= Time.deltaTime;
//		}
//		lifetime += Time.deltaTime;
//	}

	#region Item Spawner
	IEnumerator ItemHasEnergy(){
		if(GameObject.FindGameObjectWithTag ("Item") == null){

				if (state != SpawnState.SPAWNING)
				{
					HandController.Instance.PlayHandAnimation();
					StartCoroutine( SpawnWave( waves[nextWave] ) );
					yield return new WaitForSeconds(searchCountdown);
				}

		}

	}

	IEnumerator SpawnWave(Wave _wave){
		state = SpawnState.SPAWNING;
		for (int i = 0; i < _wave.count; i++)
		{
			//int itemIndex = Random.Range(0, _wave.count); randomize between Items
			//Debug.Log("O indice eh " + itemIndex);

			//SpawnItem(_wave.item, _wave.touchColorItem);
			SpawnItem(_wave.item);

			yield return new WaitForSeconds(1f/_wave.rate); // ou 1f/_wave.delay
		}
		state = SpawnState.WAITING;
		yield return new WaitForSeconds(timeBetweenWaves); // sempre usar quando tiver usando IEnumerator
	}

	public void SpawnItem(Transform _item, Transform _touchColorItem){
		Transform _spawnPoint = itemSpawnPoint[ Random.Range (0,itemSpawnPoint.Length) ]; //choose random point declared on the Unity Editor
		Instantiate(_item, _spawnPoint.position, _spawnPoint.rotation);
	}

	public void SpawnItem(Transform _item){
		Transform _spawnPoint = itemSpawnPoint[ Random.Range (0,itemSpawnPoint.Length) ]; //choose random point declared on the Unity Editor
		Instantiate(_item, _spawnPoint.position, _spawnPoint.rotation);
		//_item.transform.SetParent(this.transform); cannot set as a parent because the parent is prefab. To prevent corruption
		//AudioManager.Instance.PlaySound(spawnSound);
	}

	void WaveCompleted(){
		state = SpawnState.COUNTING;
		waveCountdown = timeBetweenWaves;
		if(nextWave+1 > waves.Length -1){
			nextWave = 0;
			Debug.Log("All waves completed! Looping...");
			//Chamar Level Clear e depois chamar LevelManager (Level 2)
		}else{
			nextWave++;
		}
	}

	void SetRandomTimeDestroy(){
	    timeToDestroy = Random.Range(minTime, maxTime);
	 }

	public void DestroyItem(Transform item){
		DestroyObject(item);
	}
	#endregion

}



//NAO FUNCIONA
using UnityEngine;
using System.Collections;

public class ItemController : MonoBehaviour {

	#region Public Variables
	public enum SpawnState{SPAWNING, WAITING, COUNTING};
	private SpawnState state = SpawnState.COUNTING;
	[System.Serializable]
	public class Wave{
		public string name; //nome da Wave (para Items)
		public Transform item; // Referencia para instanciar o objeto (Enemies, player, item)
		public int count; //armazena a quantidade do contador
		public float rate; 
	}
	[SerializeField] private string spawnSound;
	public Wave[] waves;
	public Transform[] itemSpawnPoint;
	public float lifetime;
	public float timeToDestroy; 
	public float minTime = 7f;
	public float maxTime = 90f;
	#endregion

	#region Private Variables
	//Time between search is in seconds 
	private int nextWave = 0;
	#endregion


	void Start(){
		if(waves.Length == 0){
			Debug.LogError("No WAVES HAS BEEN FOUND. ");
		}

		if(itemSpawnPoint.Length == 0){
			Debug.LogError("No item Spawn referenced");
		}
		StartCoroutine(ItemHasEnergy());

	}

	#region Item Spawner
	IEnumerator ItemHasEnergy(){
		float timeBetweenWaves = 4f; 
		if (state == SpawnState.COUNTING){
			if(GameObject.FindGameObjectWithTag ("Item") == null){
				HandController.Instance.PlayHandAnimation();
				StartCoroutine( SpawnWave( waves[nextWave] ) );
			}
			yield return new WaitForSeconds(timeBetweenWaves);
		}else{
			WaveCompleted();
		}
		yield break;
	}

	IEnumerator SpawnWave(Wave _wave){
		state = SpawnState.SPAWNING;
		for (int i = 0; i < _wave.count; i++)
		{
			SpawnItem(_wave.item);
			yield return new WaitForSeconds(1f/_wave.rate); // ou 1f/_wave.delay
		}
		state = SpawnState.WAITING;
		yield break;
	}

	public void SpawnItem(Transform _item){
		Transform _spawnPoint = itemSpawnPoint[ Random.Range (0,itemSpawnPoint.Length) ]; //choose random point declared on the Unity Editor
		Instantiate(_item, _spawnPoint.position, _spawnPoint.rotation);
		//AudioManager.Instance.PlaySound(spawnSound);
	}

	void WaveCompleted(){
		state = SpawnState.COUNTING;
		if(nextWave+1 > waves.Length -1){
			nextWave = 0;
			Debug.Log("All waves completed! Looping...");
		}else{
			nextWave++;
		}
	}
	#endregion

}



/*ATUAL FUNCIONANDO*/
using UnityEngine;
using System.Collections;

public class ItemController : MonoBehaviour {

	#region Public Variables
	public enum SpawnState{SPAWNING, WAITING, COUNTING};
	[System.Serializable]
	public class Wave{
		public string name; //nome da Wave (para Items)
		public Transform item; // Referencia para instanciar o objeto (Enemies, player, item) 
		public int count; //armazena a quantidade do contador
		public float rate; 
	}
	[SerializeField] private string spawnSound;
	public Wave[] waves;
	public float timeBetweenWaves = 2.5f;
	public float waveCountdown;
	public Transform[] itemSpawnPoint;
	#endregion

	#region Private Variables
	private float searchCountdown = 1f; //Time between search is in seconds 
	private int nextWave = 0;
	private bool isFirstWave; 
	private SpawnState state = SpawnState.COUNTING;
	#endregion


	void Start(){
		if(waves.Length == 0){
			Debug.LogError("No WAVES HAS BEEN FOUND. ");
		}

		if(itemSpawnPoint.Length == 0){
			Debug.LogError("No item Spawn referenced");
		}
		waveCountdown = timeBetweenWaves;
	}

	void Update(){
		if(state == SpawnState.WAITING){
			//Criar condicao para que seja spawnado mesmo que esteja contando 
			if(!ItemHasEnergy()){
				WaveCompleted();
				//Update Points on Game Manager
			}else{
				return;
			}
		}
		if(waveCountdown <= 0)
		{
			if (state != SpawnState.SPAWNING)
			{
				HandController.Instance.PlayHandAnimation();
				StartCoroutine( SpawnWave( waves[nextWave] ) );
			}
		}
		else
		{
			waveCountdown -= Time.deltaTime;
		}
	}

	#region Item Spawner
	bool ItemHasEnergy(){
		searchCountdown -= Time.deltaTime;
		if(searchCountdown <= 0f){
			searchCountdown = 1f;
			if(GameObject.FindGameObjectWithTag ("Item") == null){
				return false;
			}
		}
		return true;
	}

	IEnumerator SpawnWave(Wave _wave){
		state = SpawnState.SPAWNING;
		for (int i = 0; i < _wave.count; i++)
		{
			SpawnItem(_wave.item);
			yield return new WaitForSeconds(1f/_wave.rate); // ou 1f/_wave.delay
		}
		state = SpawnState.WAITING;
		yield break; // sempre usar quando tiver usando IEnumerator
	}

	public void SpawnItem(Transform _item, Transform _touchColorItem){
		Transform _spawnPoint = itemSpawnPoint[ Random.Range (0,itemSpawnPoint.Length) ]; //choose random point declared on the Unity Editor
		Instantiate(_item, _spawnPoint.position, _spawnPoint.rotation);
	}

	public void SpawnItem(Transform _item){
		Transform _spawnPoint = itemSpawnPoint[ Random.Range (0,itemSpawnPoint.Length) ]; //choose random point declared on the Unity Editor
		Instantiate(_item, _spawnPoint.position, _spawnPoint.rotation);
		//AudioManager.Instance.PlaySound(spawnSound);
	}

	void WaveCompleted(){
		state = SpawnState.COUNTING;
		waveCountdown = timeBetweenWaves;
		if(nextWave+1 > waves.Length -1){
			nextWave = 0;
			Debug.Log("All waves completed! Looping...");
		}else{
			nextWave++;
		}
	}
	#endregion

}


/*ItemSpawner Funcionando*/
using UnityEngine;
using System.Collections;

public class ItemSpawner : MonoBehaviour
{
	[System.Serializable]
	public class Wave
	{
		public string name;
		//nome da Wave (para Items)
		public Transform item;
		// Referencia para instanciar o objeto (Enemies, player, item)
		public int count;
		//armazena a quantidade do contador
	}

	public Wave[] waves;
	public Transform[] itemSpawnPoint;
	private int nextWave = 0;
	public float maxTime = 9;
	public float minTime = 2;
	public float waveCountdown;
	public float timeBetweenWaves = 3f;


	//The time to spawn the object
	private float spawnTime;

	void Start ()
	{
		if (itemSpawnPoint.Length == 0) {
			Debug.LogError ("No item Spawn referenced");
		}

		waveCountdown = timeBetweenWaves;
	}

	void Update ()
	{
		if (waveCountdown <= 0) {
			isTimeToSpawn ();
		} else {
			waveCountdown -= Time.deltaTime;
		}
	}

	void isTimeToSpawn ()
	{
		//Check if its the right time to spawn the object
		waveCountdown = timeBetweenWaves;
		if (GameObject.FindGameObjectWithTag ("ItemN") == null) {
			if (nextWave > waves.Length - 1) {
				nextWave = 0;
				Debug.Log ("All bad waves completed! Looping...");
				return;
			} else {
				SpawnWave (waves [nextWave]);
				nextWave;
			}
		}
	}

	void SpawnWave (Wave _wave)
	{
		for (int i = 0; i < _wave.count; i) {
			SpawnItem (_wave.item);
		}
	}


	public void SpawnItem (Transform _item)
	{
		Transform _spawnPoint = itemSpawnPoint [Random.Range (0, itemSpawnPoint.Length)]; //choose random point declared on the Unity Editor
		Instantiate (_item, _spawnPoint.position, _spawnPoint.rotation);
	}
}